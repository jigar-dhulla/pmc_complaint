
# Use the official AWS Lambda base image for Python 3.13
FROM public.ecr.aws/lambda/python:3.13

# Switch to root user to install system dependencies
USER root

# Install core tools like jq and unzip first
RUN dnf install -y jq unzip which && dnf clean all

# Install required packages for headless Chrome and other tools
RUN dnf install -y mesa-libGL-devel mesa-libEGL-devel libxcb-devel libxkbcommon-devel libxkbcommon-x11-devel xorg-x11-server-Xvfb pango-devel libXScrnSaver-devel alsa-lib-devel cups-devel libxshmfence-devel nss-devel at-spi2-atk-devel liberation-sans-fonts wget nss fontconfig libXrender libXtst libXi libXrandr libjpeg-turbo libpng libXcomposite libXdamage gtk3 dbus-glib mesa-libgbm cups-libs && dnf clean all

# Download, unpack, and link the latest stable versions of Google Chrome and Chromedriver
RUN LATEST_JSON_URL="https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" && \
    CHROME_URL=$(curl -s ${LATEST_JSON_URL} | jq -r '.versions[-1].downloads.chrome[] | select(.platform=="linux64") | .url') && \
    DRIVER_URL=$(curl -s ${LATEST_JSON_URL} | jq -r '.versions[-1].downloads.chromedriver[] | select(.platform=="linux64") | .url') && \
    curl -s -L -o /tmp/chrome-linux64.zip ${CHROME_URL} && \
    unzip -q /tmp/chrome-linux64.zip -d /opt/ && \
    rm /tmp/chrome-linux64.zip && \
    curl -s -L -o /tmp/chromedriver-linux64.zip ${DRIVER_URL} && \
    unzip -q /tmp/chromedriver-linux64.zip -d /opt/ && \
    rm /tmp/chromedriver-linux64.zip && \
    ln -s /opt/chrome-linux64/chrome /usr/bin/google-chrome && \
    ln -s /opt/chromedriver-linux64/chromedriver /usr/bin/chromedriver && \
    chmod +x /usr/bin/chromedriver

# Set environment variables for Chrome and Chromedriver paths
ENV CHROME_PATH=/usr/bin/google-chrome
ENV CHROMEDRIVER_PATH=/usr/bin/chromedriver

# Revert to the default non-root user for the Lambda runtime for security
USER sbx_user1051

# Create a working directory
WORKDIR ${LAMBDA_TASK_ROOT}

# Copy requirements file first to leverage Docker layer caching
COPY requirements.lambda.txt .

# Install Python dependencies
RUN python3 -m pip install -r requirements.lambda.txt

# Copy function code
COPY pmc_complaint_checker_v2.py repository.py ./

# Set the CMD to your handler.
CMD [ "pmc_complaint_checker_v2.lambda_handler" ]
